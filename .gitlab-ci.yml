default:
  image: node:latest
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
  before_script:
    - npm ci --cache .npm --prefer-offline

workflow:
  rules:
    # Prevent creation of duplicate pipelines (https://stackoverflow.com/questions/74114309/avoid-duplicate-ci-pipelines-on-gitlab)
    - if: $CI_PIPELINE_SOURCE != "merge_request_event"

stages:
  - build
  - test
  - publish
  - deploy

build:
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 day

lint:
  stage: test
  needs: [ ]
  script:
    - npm run test:lint

unit-test:
  stage: test
  needs: [ ]
  script:
    - npm run test:unittest
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

publish:
  stage: publish
  tags:
    - deploy
  image: docker:git
  rules:
    - if: >-
        $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH &&
        $CI_COMMIT_DESCRIPTION !~ /.*no_auto_deploy.*/
      when: always
    - when: manual
      # Makes the job optional, otherwise the pipeline stays pending until this job is manually triggered and completed
      allow_failure: true
  cache: { }
  before_script: [ ]
  script:
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE:latest .
    - docker push --all-tags $CI_REGISTRY_IMAGE


deploy:
  stage: deploy
  tags:
    - deploy
  image: docker:git
  rules:
    - if: >-
        $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH &&
        $CI_COMMIT_DESCRIPTION !~ /.*no_auto_deploy.*/
      when: always
    - when: manual
      # Makes the job optional, otherwise the pipeline stays pending until this job is manually triggered and completed
      allow_failure: true
  cache: { }
  before_script: [ ]
  script:
    - git clone https://$CI_DEPLOY_USER:$CI_DEPLOY_PASSWORD@gitlab.ost.ch/barrierelos/deployment.git
    - cd deployment
    - echo -n $CI_DEPLOY_PASSWORD | docker login -u $CI_DEPLOY_USER --password-stdin $CI_REGISTRY
    - docker compose up --detach --pull always --remove-orphans
